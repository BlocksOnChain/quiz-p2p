Building a Real-Time Peer-to-Peer Quiz Game with libp2p in Next.js

Implementing a live quiz game over a decentralized network requires real-time peer-to-peer communication. libp2p (the networking stack used by IPFS and Ethereum 2.0) is a strong choice for this, as it’s designed for building P2P applications at scale ￼. Using Next.js with TypeScript on the frontend, we can create a browser-based quiz where a host broadcasts questions to participants via libp2p’s pub-sub (publish/subscribe) system. Key considerations include setting up libp2p in a Next.js environment, peer discovery (so browsers can find and connect to each other), efficient message broadcasting, synchronizing question display with a delay, and general best practices for real-time events in a decentralized setup. Below, we break down each aspect with implementation details, examples, and optimizations.

Setting Up libp2p in a Next.js TypeScript Project

Installation and Configuration: Start by installing libp2p and its modules. In a Next.js app, you’ll use the JavaScript libp2p implementation (libp2p on npm) along with various plugins: for example, WebSockets and WebRTC transports, Noise encryption, a stream multiplexer (Yamux or Mplex), and the GossipSub pubsub system. Install packages like:

npm install libp2p @libp2p/websockets @libp2p/webrtc @libp2p/bootstrap \
  @chainsafe/libp2p-noise @chainsafe/libp2p-yamux @chainsafe/libp2p-gossipsub uint8arrays

In a Next.js (React) component, initialize the libp2p node on the client side only. Next.js might try to SSR (server-side render) the code, which can cause errors (e.g. missing browser APIs or import issues). To avoid this, perform the setup in a useEffect with dynamic imports or mark the component with "use client". For example:

// (In a Next.js page or component file)
import { useEffect, useState } from 'react';

const QuizNetwork = () => {
  const [node, setNode] = useState<Libp2p | null>(null);

  useEffect(() => {
    // Only run on client
    const initLibp2p = async () => {
      const { createLibp2p } = await import('libp2p');
      const { webSockets } = await import('@libp2p/websockets');
      const { webRTC } = await import('@libp2p/webrtc');
      const { noise } = await import('@chainsafe/libp2p-noise');
      const { yamux } = await import('@chainsafe/libp2p-yamux');
      const { gossipsub } = await import('@chainsafe/libp2p-gossipsub');
      const { bootstrap } = await import('@libp2p/bootstrap');

      // Known relay or bootstrap peer addresses (multiaddrs)
      const bootstrapNodes = [
        '/dns4/my-relay.example.com/tcp/443/wss/p2p/12D3KooWK...PeerID', 
        // ... etc
      ];

      const libp2pNode = await createLibp2p({
        transports: [webSockets(), webRTC()],           // Browser transports
        connectionEncrypters: [noise()],               // Encryption (Noise protocol)
        streamMuxers: [yamux()],                       // Multiplexing
        peerDiscovery: [bootstrap({ list: bootstrapNodes })], // Peer discovery via known nodes
        services: {
          pubsub: gossipsub()                         // Enable GossipSub pub-sub
        }
      });
      setNode(libp2pNode);
      await libp2pNode.start();  // start listening for connections
    };

    initLibp2p();
  }, []);

  // ... component JSX (e.g., UI to display questions, etc.)
};

This configuration creates a libp2p node with WebSockets and WebRTC transports (so it can communicate in-browser), uses Noise for encrypted connections, and Yamux for multiplexing multiple streams. We also configure a bootstrap peer list – one or more known addresses the node will dial to discover the network ￼. In this example we might use our own relay server’s multiaddress in bootstrapNodes. The GossipSub pubsub service is enabled to allow topic-based messaging.

Note: In Next.js, ensure the libp2p code only runs in the browser. Using dynamic import() inside useEffect (as shown) or Next’s next/dynamic with { ssr: false } prevents import errors on the server. libp2p is an ESM package, so loading it at runtime on the client avoids issues with Next’s build. Also, call node.start() (or await createLibp2p(...) which starts by default in newer versions) to begin listening for connections. You might log some events to verify it’s working:

node.addEventListener('peer:discovery', evt => {
  console.log('Discovered peer:', evt.detail.id.toString());
});
node.addEventListener('peer:connect', evt => {
  console.log('Connected to peer:', evt.detail.toString());
});

This will log when new peers are found or connected ￼, which is useful during development.

Peer Discovery and Connection Handling

In a decentralized quiz app, participants’ browsers need to find and connect to the quiz creator’s peer (and potentially each other) without a central server coordinating. libp2p provides multiple peer discovery mechanisms:
	•	Bootstrap Nodes: Easiest approach – configure each libp2p node with a list of known rendezvous peers (as shown above). For example, you might run a libp2p relay server on some known host, or use IPFS bootstrap peers. The libp2p node will auto-dial those addresses on startup ￼. Once connected to a bootstrap, the peer can discover others that are also connected to that relay/network.
	•	Rendezvous Service: A more dynamic approach uses a rendezvous protocol or DHT to discover peers by topic. For instance, libp2p’s Rendezvous service allows peers to register under a “namespace” and find each other by that name ￼. In a quiz scenario, the host could announce a “quiz room” name on a rendezvous server, and participants query that to get the host’s multiaddress. This avoids having to hardcode addresses.
	•	mDNS (multicast DNS): If all peers are on the same local network, mDNS discovery can be enabled so peers auto-detect each other on LAN. (This likely won’t apply for a public internet quiz, but it’s a zero-config option for local networks.)
	•	Direct Signaling Exchange: In some cases, you might directly provide the host’s multiaddress to participants (e.g., via a QR code or link). The participant’s libp2p node can then call libp2p.dial(<multiaddr>) to connect to the host ￼. This was used in the official browser chat example: one browser copies the host peer’s address and dials it to establish a connection ￼ ￼.

Browser Connectivity (WebRTC and Relays): Browsers cannot accept inbound TCP connections due to security, so P2P communication in-browser typically relies on WebRTC or WebSockets. libp2p supports WebRTC but it requires a signaling step to get peers connected. In practice, this means you need a signaling/relay server to help browsers handshake. For example, libp2p’s WebRTC implementation often uses a Circuit Relay server for the initial connection: one peer reserves a slot on the relay and the other peer contacts it, allowing an exchange of WebRTC SDP offers through the relay. After this handshake, a direct P2P WebRTC connection is established and the relay is no longer used ￼ ￼. In our setup, the @libp2p/webrtc transport plus a bootstrap address to a relay accomplishes this. Essentially, the quiz host or a third-party runs a libp2p relay server (which could be a simple Node.js libp2p node with the circuit-relay service enabled). Participants all connect to the relay (bootstrap), which then facilitates peer discovery and WebRTC handshakes among them. Once connected via WebRTC, peers can communicate directly with lower latency. (If direct connection fails due to NAT, libp2p can fall back to relaying messages, but GossipSub will ensure delivery regardless ￼ ￼.)

Example libp2p mesh network: Each peer (browsers and servers in this diagram) has multiple transport options (WebRTC, WebSockets, WebTransport, TCP, etc.) to connect with others. libp2p’s modular design allows a robust mesh topology where peers will try different transports to reach each other, maximizing connectivity ￼ ￼. For a Next.js quiz app, this means you can include both WebSockets and WebRTC transports so that, for example, a browser peer can even connect to a Node.js libp2p backend or any other peer using at least one common transport.

Once discovery is in place and peers connect, libp2p will emit events as shown earlier. You can maintain a list of currently connected participants by listening for peer:connect and peer:disconnect events and updating React state. Each peer has a unique Peer ID (derived from a public key), which you can use to identify who is who. For instance, on peer:connect, you might add evt.detail (the PeerId string) to a list of active players.

Broadcasting Questions with libp2p PubSub

Publish/Subscribe Messaging: libp2p offers a PubSub API which is perfect for a quiz’s one-to-many messaging pattern. The quiz host can publish each question to a topic, and all participant peers subscribe to that topic to receive the question in real time. We enable the GossipSub implementation of PubSub in the libp2p config (as services.pubsub: gossipsub() in the setup above). GossipSub is a scalable, gossip-based pub-sub protocol – it ensures efficient message propagation even with many peers by forwarding messages in a mesh network rather than flooding every peer directly ￼.

Joining a Topic: After your libp2p node starts, join a quiz topic (e.g. based on a room code or quiz ID). For example:

const quizTopic = 'quiz-game-1234';
await node.services.pubsub.subscribe(quizTopic);

Subscribing registers the peer’s interest in that topic. You can then listen for incoming messages. In the newest libp2p API, PubSub acts as an event emitter. For example:

node.services.pubsub.addEventListener('message', (evt) => {
  const { topic, data, from } = evt.detail;
  if (topic === quizTopic) {
    const msgText = new TextDecoder().decode(data);
    console.log(`Received message on ${topic} from ${from}: ${msgText}`);
    // handle the question (or answer) contained in msgText
  }
});

In older versions, you might pass a callback to subscribe, but the event listener approach is now common ￼ ￼. When the quiz host publishes a question, all subscribed peers will get a 'message' event.

Sending Messages: To send out a question, the host peer publishes to the same topic. For example:

const question = { id: 5, text: "What is the capital of France?" };
const bytes = new TextEncoder().encode(JSON.stringify(question));
await node.services.pubsub.publish(quizTopic, bytes);

The PubSub system requires data as a Uint8Array, so we encode the question object (here as JSON string). In our earlier import, we included the uint8arrays package, which provides convenient helpers like fromString and toString for this purpose ￼ ￼. For instance: fromString(message) to get bytes for publishing ￼. On the receiving end, decode it back to a string or object.

Using pub-sub means the quiz creator only needs to send each question once – the libp2p network will take care of distributing that message to all subscribed participants. GossipSub is quite efficient: it maintains a mesh of connected peers for each topic and gossips message IDs to peers not directly connected, reducing redundant traffic. This design is robust and proven (for example, Ethereum 2.0 uses GossipSub for block propagation to thousands of nodes).

Example: The libp2p browser chat demo uses pubsub in a similar way. Both browser peers subscribe to a common topic and then sending a message from one peer triggers an event in the other peer with the message content ￼ ￼. We’re applying the same pattern for quiz questions and answers.

Synchronizing Question Delivery with a Delay

In a quiz game, you want all participants to see each question at nearly the same time. Network latencies can vary – one peer might receive the published question in 50ms, another in 300ms, etc. Introducing a short delay (e.g. 5 seconds) before showing the question can equalize the experience and account for lag. Essentially, the question is sent out slightly before it’s revealed, buffering out network jitter.

Implementation approaches:
	•	Client-side Timer: The simplest method is for each participant to wait a fixed duration after receiving a question message. For example, when a 'question' message arrives via pubsub, instead of immediately rendering it, you start a 5-second countdown on the client. All clients do this, so even if one got the message a bit earlier, everyone displays it after roughly the same interval. In code:

if (msg.type === 'question') {
  setTimeout(() => showQuestion(msg.data), 5000);
}

The 5s delay will ensure that even the slowest peer (within a reasonable range) has the question by the time the timer ends. Essentially, you’re trading a small known delay to avoid a larger unpredictable delay.

	•	Scheduled Start Time: A more synchronized approach is to have the host include a timestamp in the message indicating when to reveal the question. For instance, host sends { text: "...", revealAt: Date.now() + 5000 }. Each client computes the difference between revealAt and its own current time on receipt, then uses that as the timeout. This accounts for minor clock differences and ensures all clients aim for the same absolute moment to show the question. It’s slightly more complex (and assumes clocks are roughly in sync, which in most cases they are within a second or two).
	•	Two-Phase Broadcast: Another approach is the host sends a “Get Ready” message first (possibly with the question but marked hidden), then 5 seconds later sends a “Reveal” message or signal that triggers display. This guarantees no one sees the question before the reveal signal. However, this doubles the number of messages and adds complexity, so the timer approach is usually sufficient.

Why 5 seconds? It’s an arbitrary cushion that has proven effective in live quizzes and broadcasts. Even platforms like Crowdpurr (a live quiz app) discuss using a ~5 second delay to sync online participants with a live host stream ￼. In our P2P context, we use it to mitigate network variance. You can adjust the duration based on testing – if all players are in the same region with fast connections, 2 seconds might suffice; if global, maybe slightly more.

On the UI side, you might show a countdown (“Next question in 3…2…1…”) during this delay so that users know the question is coming. This improves the experience by turning network delay into a purposeful countdown.

Best Practices for Real-Time P2P Event Handling

Building a real-time, decentralized quiz comes with considerations for both networking and user experience:
	•	Efficient Event Handling: libp2p events (peer connections, incoming messages, etc.) should be handled promptly on the UI. Use state management to trigger React re-renders (e.g. update the current question state when the timer ends, update a list of players when a new peer joins). Keep the event handlers lightweight – if heavy processing is needed (not likely for a quiz question), consider offloading to a web worker to keep the UI responsive.
	•	Maintain a Singleton Node: Ensure you only create one libp2p node instance per client. If using React, avoid re-initializing on every render – a good pattern is to store the node in a React ref or context. This way, components can use the established connection and pubsub without reconnecting. If you navigate between pages in Next.js, you might maintain the libp2p node in a higher-level state (or even outside React) so that it persists.
	•	Cleanup: When the quiz ends or the component unmounts, stop the libp2p node (await node.stop()). This closes connections and frees resources. It’s important especially if the user might navigate away – you don’t want lingering background peers or memory leaks.
	•	Scalability Considerations: For a few dozen peers, a single GossipSub topic is fine. If you anticipate hundreds or thousands of participants, libp2p GossipSub can still handle it (it’s designed for large networks), but you should run enough bootstrap/relay nodes to support the peer traffic. GossipSub will form an overlay network among the peers; as host, you don’t need to directly connect to every single participant (messages will hop through the mesh). If extremely large scale (e.g. tens of thousands of peers) is a goal, consider clustering participants into multiple topics/rooms to reduce each pubsub mesh size, or use more advanced discovery (Kad-DHT) to distribute load. The libp2p team is actively working on scaling pubsub to millions of nodes ￼, so the architecture is quite robust.
	•	Use Multiple Transports: For better performance and connectivity, include multiple transports in your libp2p config. Our example already uses WebSockets (which can connect to a bootstrap server or Node.js peer) and WebRTC (for direct browser-to-browser). You might also experiment with WebTransport (an HTTP3-based transport) as it becomes available ￼. More transports = higher chance any two peers find a way to talk (fall back to relays if direct fails). This ensures a more resilient network where the quiz runs smoothly even if some connection paths are restricted.
	•	Testing and Debugging: During development, it’s useful to see libp2p’s internal logs. In a browser environment, you can enable debug logging by opening dev console and typing:
localStorage.setItem('debug', 'libp2p:*');
Then refresh. This will output detailed logs for connections, pubsub, etc. (This is mentioned in libp2p docs ￼.) You can observe the peer discovery process, message dissemination, and any errors. For production, of course, disable debug logging.
	•	Security: libp2p takes care of encrypting connections (Noise protocol), so your question/answer content is not sent in plain text over the wire ￼. Still, be mindful of trust: in an open P2P network, any peer could publish on the topic. In a quiz, you likely only want the host to send questions. You can enforce this at the application layer (ignore messages on the question topic that don’t come from the host’s Peer ID, for example). Similarly, if sending answers via pubsub, you might isolate them to a different topic or include a participant ID to prevent confusion. Validate inputs to avoid any malicious payloads. The decentralized nature means there’s no server to filter messages, so your client logic should do basic validation (e.g., ensuring an incoming message conforms to the expected format {id, text, ...}).
	•	Latency Optimization: The 5-second delay covers most latency issues. If you need even more real-time responsiveness (say you want to drop to 1 second delay), you could implement a simple time-sync (have participants ping the host to estimate offset) – but this adds complexity and usually isn’t necessary for a fun quiz game. It’s generally better to err on the side of a slightly longer, consistent delay for fairness.
	•	User Experience: Real-time feedback is important. Use the peer connection info to maybe display “X players connected”. When a question is sent, you can show a subtle indicator (“Question received, awaiting sync…”) during the 5-second wait. When time’s up, display it for everyone. Also consider what happens if a new participant joins mid-quiz – you might have the host periodically broadcast the current question or state so late joiners catch up, or simply lock out joining until next round. All these can be handled via additional pubsub messages or direct RPC-style messages (libp2p allows you to send direct requests on custom protocols too, if needed).

By following these practices, you’ll harness libp2p’s strengths – a scalable, distributed network with no central bottleneck – while ensuring the quiz experience remains smooth and synchronized for all users. libp2p’s widespread use in large-scale systems is a reassuring sign: if it works for global file sharing and blockchain networks, it can certainly power an interactive quiz! 🎉

Sources:
	•	libp2p Official Docs – JavaScript Getting Started ￼ ￼
	•	libp2p Browser PubSub Chat Example (GitHub) ￼ ￼
	•	Crowdpurr Community – Handling Broadcast Delay in Live Quizzes ￼
	•	libp2p Discussion – P2P Gaming and PubSub (real-time uses of GossipSub) ￼ ￼
	•	libp2p WebRTC Guide – Browser connectivity and mesh networks ￼ ￼